package {	import flash.media.SoundChannel;	import flash.events.Event;	import flash.media.Sound;	public class SoundManager	{		static const MUSIC:int = 0;		static const EFFECT:int = 1;		static const FOOTSTEPS:int = 2;		static const AMBIENCE:int = 3;				static const BACKGROUND:int = 0;		static const ENV_DOOR_OPEN:int = 1;		static const ENV_STEAM_LOOP:int = 2;		static const ENV_STEAM_REL_LONG:int = 3;		static const ENV_STEAM_REL_MED_01:int = 4;		static const ENV_STEAM_REL_MED_02:int = 5;		static const ENV_STEAM_REL_MED_03:int = 6;		static const ENV_STEAM_REL_SML_01:int = 7;		static const ENV_STEAM_REL_SML_02:int = 8;		static const ENV_STEAM_REL_SML_03:int = 9;		static const ENV_STEAM_REL_SML_04:int = 10;		static const GUARD_STUN_FIRE:int = 11;		static const MIR_FOOT_RUN_01:int = 12;		static const MIR_FOOT_RUN_02:int = 13;		static const MIR_FOOT_RUN_03:int = 14;		static const MIR_FOOT_RUN_04:int = 15;		static const MIR_FOOT_VENT_01:int = 16;		static const MIR_FOOT_VENT_02:int = 17;		static const MIR_FOOT_VENT_03:int = 18;		static const MIR_FOOT_VENT_04:int = 19;		static const MIR_FOOT_WALK_01:int = 20;		static const MIR_FOOT_WALK_02:int = 21;		static const MIR_FOOT_WALK_03:int = 22;		static const MIR_FOOT_WALK_04:int = 23;		static const MIR_GRAP_FIRE:int = 24;		static const MIR_GRAP_HIT_01:int = 25;		static const MIR_GRAP_HIT_02:int = 26;		static const MIR_GRAP_HIT_03:int = 27;		static const MIR_GRAP_RETRACT:int = 28;		static const MIR_HOOD:int = 29;		static const MIR_PICK_01:int = 30;		static const MIR_PICK_02:int = 31;		static const MIR_PICK_03:int = 32;		static const MIR_PICK_END_V1:int = 33;		static const MIR_PICK_END_V2:int = 34;				var channels:Array;		var sounds:Array;		var isPlaying:Array;						function SoundManager() {			channels = new Array();						isPlaying = new Array();			isPlaying[MUSIC] = false;			isPlaying[EFFECT] = false;						sounds = new Array();			sounds[BACKGROUND] = new bgSnd();			sounds[ENV_DOOR_OPEN] = new envDoorOpen();			sounds[ENV_STEAM_LOOP] = new envSteamLoop();			sounds[ENV_STEAM_REL_LONG] = new envSteamRelLong();			sounds[ENV_STEAM_REL_MED_01] = new envSteamRelMed01();			sounds[ENV_STEAM_REL_MED_02] = new envSteamRelMed02();			sounds[ENV_STEAM_REL_MED_03] = new envSteamRelMed03();			sounds[ENV_STEAM_REL_SML_01] = new envSteamRelSml01();			sounds[ENV_STEAM_REL_SML_02] = new envSteamRelSml02();			sounds[ENV_STEAM_REL_SML_03] = new envSteamRelSml03();			sounds[ENV_STEAM_REL_SML_04] = new envSteamRelSml04();			sounds[GUARD_STUN_FIRE] = new guardStunFire();			sounds[MIR_FOOT_RUN_01] = new mirFootRun01();			sounds[MIR_FOOT_RUN_02] = new mirFootRun02();			sounds[MIR_FOOT_RUN_03] = new mirFootRun03();			sounds[MIR_FOOT_RUN_04] = new mirFootRun04();			sounds[MIR_FOOT_VENT_01] = new mirFootVent01();			sounds[MIR_FOOT_VENT_02] = new mirFootVent02();			sounds[MIR_FOOT_VENT_03] = new mirFootVent03();			sounds[MIR_FOOT_VENT_04] = new mirFootVent04();			sounds[MIR_FOOT_WALK_01] = new mirFootWalk01();			sounds[MIR_FOOT_WALK_02] = new mirFootWalk02();			sounds[MIR_FOOT_WALK_03] = new mirFootWalk03();			sounds[MIR_FOOT_WALK_04] = new mirFootWalk04();			sounds[MIR_GRAP_FIRE] = new mirGrapFire();			sounds[MIR_GRAP_HIT_01] = new mirGrapHit01();			sounds[MIR_GRAP_HIT_02] = new mirGrapHit02();			sounds[MIR_GRAP_HIT_03] = new mirGrapHit03();			sounds[MIR_GRAP_RETRACT] = new mirGrapRetract();			sounds[MIR_HOOD] = new mirHood();			sounds[MIR_PICK_01] = new mirPick01();			sounds[MIR_PICK_02] = new mirPick02();			sounds[MIR_PICK_03] = new mirPick03();			sounds[MIR_PICK_END_V1] = new mirPickEndv1();			sounds[MIR_PICK_END_V2] = new mirPickEndv2();		}				function playSound(soundSet:Array, type:int = MUSIC, loop:Boolean = false) {			var sound:int = getRandomSound(soundSet);			channels[type] = sounds[sound].play();			isPlaying[type] = true;						if (loop) {				channels[type].addEventListener(Event.SOUND_COMPLETE, onLoop(soundSet, type));			} else {				channels[type].addEventListener(Event.SOUND_COMPLETE, onStop(type));			}		}				private function getRandomSound(soundSet:Array):int {			return soundSet[Math.floor(Math.random() * soundSet.length)];		}				private function onStop(type:int) {			return function(event:Event) {				isPlaying[type] = false;			}		}		private function onLoop(soundSet:Array, type:int) {			return function(event:Event) {				playSound(soundSet, type, true);			}		}				function isChannelPlaying(type:int) {			return isPlaying[type];		}	}}